@using BlazorStrap
@using Microsoft.AspNetCore.Components
@using Application.Services.Recipe
@using Application.Models.Recipes
@namespace UI.Components

<div class="container">
    <div class="row justify-content-center">
        <EditForm Model="@RecipeToAdd" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="col-lg-6 col-md-8">
                <div class="mb-3">
                    <BSLabel for="authorEmail">Author Email</BSLabel>
                    <BSInput InputType="InputType.Email" placeholder="name@example.com" id="authorEmail" @bind-Value="@RecipeToAdd.AuthorEmail" />
                    <ValidationMessage For="@(() => RecipeToAdd.AuthorEmail)" />
                </div>
                <div class="mb-3">
                    <BSLabel for="title">Title</BSLabel>
                    <BSInput InputType="InputType.Text" placeholder="Enter title" id="title" @bind-Value="@RecipeToAdd.Title" />
                </div>
                <div class="mb-3">
                    <BSLabel for="fileInput">Main Photo</BSLabel>
                    <InputFile class="form-control" OnChange="@HandleFileSelected" />
                    <BSLabel style="color: red;" @bind-IsHidden="FileErrorIsHidden">Max size 10MB. File is required in formats: .jpg, .jpeg, .png, .webp</BSLabel>
                </div>
                <div class="mb-3">
                    <BSLabel for="content">Content</BSLabel>
                    <BSInput InputType="InputType.TextArea" id="content" @bind-Value="@RecipeToAdd.Content" />
                </div>
                <BSButton @bind-IsDisabled="_submitButtonDisabled" Color="BSColor.Success" type="submit">Submit</BSButton>
            </div>

        </EditForm>

    </div>
</div>
@code {
    [Inject] private IRecipeService RecipeService { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    private bool FileErrorIsHidden = true;
    private bool _submitButtonDisabled = false;
    private RecipeToAddDto RecipeToAdd = new RecipeToAddDto();
    private IBrowserFile? MainPhoto { get; set; } = null!;
    private const long FileSize = 1024 * 1000 * 10;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        MainPhoto = null!;
        var extensions = new[] {".jpg", ".jpeg", ".png", ".webp"};
        var file = e.File;
        var extension = Path.GetExtension(file.Name);
        if (extensions.Contains(extension) && e.File.Size < FileSize)
        {
            if (file != null)
            {
                MainPhoto = file;
                FileErrorIsHidden = true;
                return;
            }
        }

        FileErrorIsHidden = false;
    }

    private async Task HandleValidSubmit()
    {
        _submitButtonDisabled = true;
        if (MainPhoto == null)
        {
            _submitButtonDisabled = false;
            FileErrorIsHidden = false;
            return;
        }
        using var ms = MainPhoto.OpenReadStream(FileSize);
        RecipeToAdd.MainPhoto = ms;
        RecipeToAdd.FileExtension = Path.GetExtension(MainPhoto.Name);
        var recipeId = await RecipeService.AddRecipe(RecipeToAdd);
        NavigationManager.NavigateTo($"/recipe/{recipeId}");
    }
    

}